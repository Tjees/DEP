-- ------------------------------------------------------------------------
-- Data & Persistency
-- Opdracht S7: Indexen
--
-- (c) 2020 Hogeschool Utrecht
-- Tijmen Muller (tijmen.muller@hu.nl)
-- André Donk (andre.donk@hu.nl)
-- ------------------------------------------------------------------------
-- LET OP, zoals in de opdracht op Canvas ook gezegd kun je informatie over
-- het query plan vinden op: https://www.postgresql.org/docs/current/using-explain.html


-- S7.1.
--
-- Je maakt alle opdrachten in de 'sales' database die je hebt aangemaakt en gevuld met
-- de aangeleverde data (zie de opdracht op Canvas).
--
-- Voer het voorbeeld uit wat in de les behandeld is:
-- 1. Voer het volgende EXPLAIN statement uit:
--    EXPLAIN SELECT * FROM order_lines WHERE stock_item_id = 9;
--    Bekijk of je het resultaat begrijpt. Kopieer het explain plan onderaan de opdracht
-- 2. Voeg een index op stock_item_id toe:
--    CREATE INDEX ord_lines_si_id_idx ON order_lines (stock_item_id);
-- 3. Analyseer opnieuw met EXPLAIN hoe de query nu uitgevoerd wordt
--    Kopieer het explain plan onderaan de opdracht
-- 4. Verklaar de verschillen. Schrijf deze hieronder op.

EXPLAIN SELECT * FROM order_lines WHERE stock_item_id = 9;
CREATE INDEX ord_lines_si_id_idx ON order_lines (stock_item_id);

-- Eerst wordt een sequence scan uitgevoerd en daarna een index scan, bij de eerste
-- ordered hij de items en bij de tweede de index.

-- "Seq Scan on order_lines  (cost=0.00..11.88 rows=1 width=502)"
-- "  Filter: (stock_item_id = 9)"

-- "Index Scan using ord_lines_si_id_idx on order_lines  (cost=0.14..8.16 rows=1 width=502)"
-- "  Index Cond: (stock_item_id = 9)"

-- S7.2.
--
-- 1. Maak de volgende twee query’s:
-- 	  A. Toon uit de order tabel de order met order_id = 73590
-- 	  B. Toon uit de order tabel de order met customer_id = 1028
-- 2. Analyseer met EXPLAIN hoe de query’s uitgevoerd worden en kopieer het explain plan onderaan de opdracht
-- 3. Verklaar de verschillen en schrijf deze op
-- 4. Voeg een index toe, waarmee query B versneld kan worden
-- 5. Analyseer met EXPLAIN en kopieer het explain plan onder de opdracht
-- 6. Verklaar de verschillen en schrijf hieronder op

EXPLAIN SELECT * FROM orders
WHERE order_id = 73590;

EXPLAIN SELECT * FROM orders
WHERE customer_id = 1028;

-- "Index Scan using pk_sales_orders on orders  (cost=0.29..8.31 rows=1 width=155)"
-- "  Index Cond: (order_id = 73590)"

-- "Seq Scan on orders  (cost=0.00..1819.94 rows=107 width=155)"
-- "  Filter: (customer_id = 1028)"

-- De een gebruikt de index omdat deze is aangemaakt en de ander gebruikt de seq en filter.

CREATE INDEX order_customer_id_idx ON orders(customer_id)

-- "Bitmap Heap Scan on orders  (cost=5.12..308.96 rows=107 width=155)"
-- "  Recheck Cond: (customer_id = 1028)"
-- "  ->  Bitmap Index Scan on order_customer_id_idx  (cost=0.00..5.10 rows=107 width=0)"
-- "        Index Cond: (customer_id = 1028)"

-- Nu gebruiken ze beiden een index alleen doet deze nog een stapje ervoor waarschijnlijk
-- omdat nu specifiek wordt gevraagd naar het customer ID.

-- S7.3.A
--
-- Het blijkt dat customers regelmatig klagen over trage bezorging van hun bestelling.
-- Het idee is dat verkopers misschien te lang wachten met het invoeren van de bestelling in het systeem.
-- Daar willen we meer inzicht in krijgen.
-- We willen alle orders (order_id, order_date, salesperson_person_id (als verkoper),
--    het verschil tussen expected_delivery_date en order_date (als levertijd),  
--    en de bestelde hoeveelheid van een product zien (quantity uit order_lines).
-- Dit willen we alleen zien voor een bestelde hoeveelheid van een product > 250
--   (we zijn nl. als eerste geïnteresseerd in grote aantallen want daar lijkt het vaker mis te gaan)
-- En verder willen we ons focussen op verkopers wiens bestellingen er gemiddeld langer over doen.
-- De meeste bestellingen kunnen binnen een dag bezorgd worden, sommige binnen 2-3 dagen.
-- Het hele bestelproces is er op gericht dat de gemiddelde bestelling binnen 1.45 dagen kan worden bezorgd.
-- We willen in onze query dan ook alleen de verkopers zien wiens gemiddelde levertijd 
--  (expected_delivery_date - order_date) over al zijn/haar bestellingen groter is dan 1.45 dagen.
-- Maak om dit te bereiken een subquery in je WHERE clause.
-- Sorteer het resultaat van de hele geheel op levertijd (desc) en verkoper.
-- 1. Maak hieronder deze query (als je het goed doet zouden er 377 rijen uit moeten komen, en het kan best even duren...)

EXPLAIN SELECT orders.order_id, order_lines.quantity, orders.salesperson_person_id AS verkoper, 
(SELECT orders.expected_delivery_date - orders.order_date AS levertijd), orders.order_date
FROM orders
INNER JOIN order_lines ON order_lines.order_id = orders.order_id
WHERE (order_lines.quantity > 250) AND orders.salesperson_person_id IN (
	SELECT salesperson_person_id FROM orders
	GROUP BY salesperson_person_id, expected_delivery_date, order_date
	HAVING ((expected_delivery_date - order_date) / COUNT(*) > 1.45)
)
ORDER BY levertijd, verkoper DESC;

-- S7.3.B
--
-- 1. Vraag het EXPLAIN plan op van je query (kopieer hier, onder de opdracht)
-- 2. Kijk of je met 1 of meer indexen de query zou kunnen versnellen
-- 3. Maak de index(en) aan en run nogmaals het EXPLAIN plan (kopieer weer onder de opdracht) 
-- 4. Wat voor verschillen zie je? Verklaar hieronder.

CREATE INDEX order_salesperson_person_id_idx ON orders(salesperson_person_id)
CREATE INDEX order_lines_quantity_idx ON order_lines(quantity)

-- "Sort  (cost=5869.19..5869.49 rows=120 width=20)"
-- "  Sort Key: ((SubPlan 1)), orders.salesperson_person_id DESC"
-- "  ->  Hash Join  (cost=4395.70..5865.05 rows=120 width=20)"
-- "        Hash Cond: (orders.salesperson_person_id = ""ANY_subquery"".salesperson_person_id)"
-- "        ->  Merge Join  (cost=1841.44..3307.32 rows=241 width=20)"
-- "              Merge Cond: (orders.order_id = order_lines.order_id)"
-- "              ->  Index Scan using pk_sales_orders on orders  (cost=0.29..2819.22 rows=73595 width=16)"
-- "              ->  Sort  (cost=1841.15..1841.75 rows=241 width=8)"
-- "                    Sort Key: order_lines.order_id"
-- "                    ->  Seq Scan on order_lines  (cost=0.00..1831.61 rows=241 width=8)"
-- "                          Filter: (quantity > 250)"
-- "        ->  Hash  (cost=2551.76..2551.76 rows=200 width=4)"
-- "              ->  HashAggregate  (cost=2549.76..2551.76 rows=200 width=4)"
-- "                    Group Key: ""ANY_subquery"".salesperson_person_id"
-- "                    ->  Subquery Scan on ""ANY_subquery""  (cost=2371.90..2543.63 rows=2453 width=4)"
-- "                          ->  HashAggregate  (cost=2371.90..2519.10 rows=2453 width=12)"
-- "                                Group Key: orders_1.salesperson_person_id, orders_1.expected_delivery_date, orders_1.order_date"
-- "                                Filter: ((((orders_1.expected_delivery_date - orders_1.order_date) / count(*)))::numeric > 1.45)"
-- "                                ->  Seq Scan on orders orders_1  (cost=0.00..1635.95 rows=73595 width=12)"
-- "        SubPlan 1"
-- "          ->  Result  (cost=0.00..0.01 rows=1 width=4)"

-- "Sort  (cost=4618.24..4618.54 rows=120 width=20)"
-- "  Sort Key: ((SubPlan 1)), orders.salesperson_person_id DESC"
-- "  ->  Hash Join  (cost=3144.75..4614.09 rows=120 width=20)"
-- "        Hash Cond: (orders.salesperson_person_id = ""ANY_subquery"".salesperson_person_id)"
-- "        ->  Merge Join  (cost=590.48..2056.36 rows=241 width=20)"
-- "              Merge Cond: (orders.order_id = order_lines.order_id)"
-- "              ->  Index Scan using pk_sales_orders on orders  (cost=0.29..2819.22 rows=73595 width=16)"
-- "              ->  Sort  (cost=590.19..590.79 rows=241 width=8)"
-- "                    Sort Key: order_lines.order_id"
-- "                    ->  Bitmap Heap Scan on order_lines  (cost=6.16..580.66 rows=241 width=8)"
-- "                          Recheck Cond: (quantity > 250)"
-- "                          ->  Bitmap Index Scan on order_lines_quantity_idx  (cost=0.00..6.10 rows=241 width=0)"
-- "                                Index Cond: (quantity > 250)"
-- "        ->  Hash  (cost=2551.76..2551.76 rows=200 width=4)"
-- "              ->  HashAggregate  (cost=2549.76..2551.76 rows=200 width=4)"
-- "                    Group Key: ""ANY_subquery"".salesperson_person_id"
-- "                    ->  Subquery Scan on ""ANY_subquery""  (cost=2371.90..2543.63 rows=2453 width=4)"
-- "                          ->  HashAggregate  (cost=2371.90..2519.10 rows=2453 width=12)"
-- "                                Group Key: orders_1.salesperson_person_id, orders_1.expected_delivery_date, orders_1.order_date"
-- "                                Filter: ((((orders_1.expected_delivery_date - orders_1.order_date) / count(*)))::numeric > 1.45)"
-- "                                ->  Seq Scan on orders orders_1  (cost=0.00..1635.95 rows=73595 width=12)"
-- "        SubPlan 1"
-- "          ->  Result  (cost=0.00..0.01 rows=1 width=4)"

-- Er zijn een aantal extra stapjes omdat ik nu een index heb gemaakt van verkoper id en quantity waadoor
-- er net zoals de vorige keer een stapje ervoor wordt gedaan.

-- S7.3.C
--
-- Zou je de query ook heel anders kunnen schrijven om hem te versnellen?
-- Ja, geen subquery gebruiken en de AVG() functie gebruiken.